openapi: 3.0.2
servers:
  - url: 'https://aswwu.com/server/elections'
  - url: 'http://localhost:8888/elections'
info:
  version: "1.0"
  title: Elections API
  description: The API for the elections project. This includes endpoints to vote along with managing elections. The ORM is split into four objects Election, Position, Candidate, and Vote. Election represents an election that will take place and can be setup by admins. Position is a generic position that candidates can run for. Candidate is an oficial candidate and what tells what position that person is running for. Vote represents a single voter candidate pair, users will cast multiples of these for each election but never for the same candidate.
paths:
  '/current':
    get:
      summary: Retrieve the current or upcoming election
      description: Retrieve the current or upcoming election.
      tags:
        - election
      responses:
        '200':
          description: The election was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        '404':
          $ref: '#/components/responses/404NotFound'
  '/election':
    get:
      summary: List elections
      description: List elections. They can be filtered by query parameters
        to narrow the list.
      tags:
        - election
      parameters:
        - $ref: '#/components/parameters/election_type_query'
        - $ref: '#/components/parameters/name_query'
        - $ref: '#/components/parameters/max_votes_query'
        - name: start_before
          in: query
          description: The maximum start date and time to filter by.
          required: false
          schema:
            type: string
        - name: start_after
          in: query
          description: The minimum start date and time to filter by.
          required: false
          schema:
            type: string
        - name: end_before
          in: query
          description: The maximum end date and time to filter by.
          required: false
          schema:
            type: string
        - name: end_after
          in: query
          description: The minimum end date and time to filter by.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The elections were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  elections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Election'
    post:
      summary: Create an election
      description: Create an election.
      tags:
        - election
      security:
        - cookieAuthentication: []
      responses:
        '201':
          description: The election was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
      requestBody:
        $ref: '#/components/requestBodies/ElectionPOSTBody'
  '/election/{election_id}':
    get:
      summary: Retrieve an election
      description: Retrieve an election.
      tags:
        - election
      parameters:
        - $ref: '#/components/parameters/election_id'
      responses:
        '200':
          description: The election was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      summary: Update an election
      description: Update an election.
      tags:
        - election
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/election_id'
      responses:
        '200':
          description: The election was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/ElectionPUTBody'
  '/election/{election_id}/count':
    get:
      summary: Tally all votes for an election
      description: Tally all votes for an election.
      tags:
        - election
      parameters:
        - $ref: '#/components/parameters/election_id'
      responses:
        '200':
          description: The votes were successfully tallied.
          content:
            application/json:
              schema:
                type: object
                properties:
                  positions:
                    type: array
                    items:
                      $ref: '#/components/schemas/VoteCount'
  '/position':
    get:
      summary: List all positions
      description: List all positions. They can be filtered by query parameters to narrow the list.
      tags:
        - position
      parameters:
        - $ref: '#/components/parameters/position_query'
        - $ref: '#/components/parameters/election_type_query'
        - name: active
          in: query
          description: Filter positions by their active status.
          required: false
          schema:
            type: string
            enum: ['true', 'false']
      responses:
        '200':
          description: The positions were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  positions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Position'
    post:
      summary: Create a position
      description: Create a position.
      tags:
        - position
      security:
        - cookieAuthentication: []
      responses:
        '201':
          description: The position was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
      requestBody:
        $ref: '#/components/requestBodies/PositionPOSTBody'
  '/position/{position_id}':
    get:
      summary: Retrieve a position
      description: Retrieve a position.
      tags:
        - position
      parameters:
        - $ref: '#/components/parameters/position_id'
      responses:
        '200':
          description: The position was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      summary: Update a position
      description: Update a position.
      tags:
        - position
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/position_id'
      responses:
        '200':
          description: The position was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/PositionPUTBody'
  '/election/{election_id}/candidate':
    get:
      summary: List candidates in an election
      description: List candidates in an election. They can be filtered by query parameters to narrow the list.
      tags:
        - candidate
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/position_query'
        - $ref: '#/components/parameters/username_query'
        - name: display_name
          in: query
          description: The display_name to filter by.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The candidates were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  candidates:
                    type: array
                    items:
                      $ref: '#/components/schemas/Candidate'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      summary: Create a candidate in an election
      description: Create a candidate in an election. Only works if the election is still open.
      tags:
        - candidate
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/election_id'
      responses:
        '201':
          description: The candidate was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/CandidatePOSTBody'
  '/election/{election_id}/candidate/{candidate_id}':
    get:
      summary: Retrieve a candidate
      description: Retrieve a candidate.
      tags:
        - candidate
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/candidate_id'
      responses:
        '200':
          description: The candidate was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      summary: Update a candidate
      description: Update a candidate. Only works if the election is still open.
      tags:
        - candidate
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/candidate_id'
      responses:
        '200':
          description: The candidate was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/CandidatePUTBody'
    delete:
      summary: Destroy a candidate
      description: Destroy a candidate. Only works if the election is still open.
      tags:
        - candidate
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/candidate_id'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
  '/vote':
    get:
      summary: Retrieve the user's votes in the current election
      description: Retrieve the user's vote in the current election.
      tags:
        - vote
      parameters:
        - $ref: '#/components/parameters/position_query'
        - $ref: '#/components/parameters/vote_query'
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: The votes were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vote'
        '401':
          $ref: '#/components/responses/401NotAuthenticated'
    post:
      summary: Create a vote for the current election
      description: Create a vote for the current election.
      tags:
        - vote
      security:
        - cookieAuthentication: []
      responses:
        '201':
          description: The vote was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/VotePOSTBody'
  '/vote/{vote_id}':
    get:
        summary: Retrieve a vote
        description: Retrieve a vote.
        tags:
          - vote
        security:
          - cookieAuthentication: []
        parameters:
          - $ref: '#/components/parameters/vote_id'
        responses:
          '200':
            description: The vote was retrieved successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Vote'
          '404':
            $ref: '#/components/responses/404NotFound'
    put:
      summary: Update a vote
      description: Update a vote. Only works if the election is still open.
      tags:
        - vote
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/vote_id'
      responses:
        '200':
          description: The vote was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/VotePUTBody'
    delete:
      summary: Destroy a vote
      description: Destroy a vote. Only works if the election is still open.
      tags:
        - vote
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/vote_id'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
  '/election/{election_id}/ballot':
    get:
      summary: Retrieve all manually entered votes in the specified election
      description: Retrieve all manually entered votes in the specified election.
      tags:
        - ballot
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/position_query'
        - $ref: '#/components/parameters/vote_query'
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: The manually entered votes were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ballots:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ballot'
        '401':
          $ref: '#/components/responses/401NotAuthenticated'
    post:
      summary: Create a manually entered vote for the specified election
      description: Create a manually entered vote for the specified election.
      tags:
        - ballot
      parameters:
        - $ref: '#/components/parameters/election_id'
      security:
        - cookieAuthentication: []
      responses:
        '201':
          description: The manually entered vote was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ballot'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthenticated'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
      requestBody:
        $ref: '#/components/requestBodies/BallotPOSTBody'
  '/election/{election_id}/ballot/{vote_id}':
    get:
        summary: Retrieve a manually entered vote
        description: Retrieve a manually entered vote.
        tags:
          - ballot
        security:
          - cookieAuthentication: []
        parameters:
          - $ref: '#/components/parameters/election_id'
          - $ref: '#/components/parameters/vote_id'
        responses:
          '200':
            description: The manually entered vote was retrieved successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Ballot'
          '404':
            $ref: '#/components/responses/404NotFound'
    delete:
      summary: Destroy a manually entered vote
      description: Destroy a manually entered vote.
      tags:
        - ballot
      security:
        - cookieAuthentication: []
      parameters:
        - $ref: '#/components/parameters/election_id'
        - $ref: '#/components/parameters/vote_id'
      responses:
        '204':
          $ref: '#/components/responses/204NoContent'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
components:
  parameters:
    election_id:
      name: election_id
      in: path
      description: The ID of the election to work with.
      required: true
      schema:
        type: string
    candidate_id:
      name: candidate_id
      in: path
      description: The ID of the candidate to work with.
      required: true
      schema:
        type: string
    position_id:
      name: position_id
      in: path
      description: The ID of the position to work with.
      required: true
      schema:
        type: string
    vote_id:
      name: vote_id
      in: path
      description: The ID of the vote to work with.
      required: true
      schema:
        type: string
    election_type_query:
      name: election_type
      in: query
      description: The election type to filter by.
      required: false
      schema:
        type: string
        enum: [senate, aswwu]
    name_query:
      name: name
      in: query
      description: The election name to filter by.
      required: false
      schema:
        type: string
    max_votes_query:
      name: max_votes
      in: query
      description: The number of votes to filter by.
      required: false
      schema:
        type: string
    position_query:
      name: position
      in: query
      description: The position UUID to filter by.
      required: false
      schema:
        type: string
    vote_query:
      name: vote
      in: query
      description: The vote username to filter by.
      required: false
      schema:
        type: string
    username_query:
      name: username
      in: query
      description: The username to filter by.
      required: false
      schema:
        type: string
  schemas:
    Election:
      type: object
      properties:
        id:
          type: string
        election_type:
          type: string
        name:
          type: string
        max_votes:
          type: integer
        start:
          type: string
        end:
          type: string
        show_results:
          type: string
      example:
        id: 'e7c5c84f-0a58-4f3b-8490-14ee0737d96f'
        election_type: 'aswwu'
        name: 'Primaries'
        max_votes: 2
        start: '2018-11-05 08:00:00.000000'
        end: '2018-11-05 20:00:00.000000'
        show_results: '2018-12-01 20:00:00.000000'
    Candidate:
      type: object
      properties:
        id:
          type: string
        election:
          type: string
        position:
          type: string
        username:
          type: string
        display_name:
          type: string
      example:
        id: '0c3fa8c5-d580-4c47-8598-a4bfd7657711'
        election: 'e7c5c84f-0a58-4f3b-8490-14ee0737d96f'
        position: '7c336bd7-7e21-4a81-a4c2-bc076852611c'
        username: 'sheldon.woodward'
        display_name: 'Sheldon Woodward'
    Position:
      type: object
      properties:
        id:
          type: string
        position:
          type: string
        election_type:
          type: string
        active:
          type: boolean
        order:
          type: integer
      example:
        id: '7c336bd7-7e21-4a81-a4c2-bc076852611c'
        position: 'Financial VP'
        election_type: 'aswwu'
        active: true
        order: 3
    Vote:
      type: object
      properties:
        id:
          type: string
        election:
          type: string
        vote:
          type: string
        position:
          type: string
        username:
          type: string
      example:
        id: '383f7395-2bc0-4f6b-80e6-ef1d742024e3'
        election: 'e7c5c84f-0a58-4f3b-8490-14ee0737d96f'
        position: '7c336bd7-7e21-4a81-a4c2-bc076852611c'
        vote: 'sheldon.woodward'
        username: 'stephen.ermshar'
    Ballot:
      type: object
      properties:
        id:
          type: string
        election:
          type: string
        vote:
          type: string
        position:
          type: string
        student_id:
          type: string
        manual_entry:
          type: string
      example:
        id: '383f7395-2bc0-4f6b-80e6-ef1d742024e3'
        election: 'e7c5c84f-0a58-4f3b-8490-14ee0737d96f'
        position: '7c336bd7-7e21-4a81-a4c2-bc076852611c'
        vote: 'sheldon.woodward'
        student_id: '1234567'
        manual_entry: 'kaden.sukachevin'
    VoteCount:
      type: object
      properties:
        position:
          type: string
        votes:
          type: array
          items:
            type: object
            properties:
              candidate:
                type: string
              votes:
                type: integer
      example:
        position: '7c336bd7-7e21-4a81-a4c2-bc076852611c'
        votes:
          - candidate: 'sheldon.woodward'
            votes: 10
  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: token
  requestBodies:
    ElectionPOSTBody:
      description: A JSON object containing election information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              election_type:
                description: The type of election, either senate or aswwu.
                type: string
              name:
                description: The name of the election.
                type: string
              max_votes:
                description: The maximum number of votes allowed in the election, must be greater than one.
                type: integer
              start:
                description: The opening date and time of the election.
                type: string
              end:
                description: The closing date and time of the election.
                type: string
              show_results:
                description: The date and time that election reults will be available. Can be null if results are never to be shown.
                type: string
            required:
              - election_type
              - name
              - max_votes
              - start
              - end
              - show_results
    ElectionPUTBody:
      description: A JSON object containing election information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: The ID of the election.
                type: string
              election_type:
                description: The type of election, either senate or aswwu.
                type: string
              name:
                description: The name of the election.
                type: string
              max_votes:
                description: The maximum number of votes allowed in the election, must be greater than one.
                type: integer
              start:
                description: The opening date and time of the election.
                type: string
              end:
                description: The closing date and time of the election.
                type: string
              show_results:
                description: The date and time that election reults will be available. Can be null if results are never to be shown.
                type: string
            required:
              - id
              - election_type
              - name
              - max_votes
              - start
              - end
              - show_results
    CandidatePOSTBody:
      description: A JSON object containing candidate information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              position:
                description: The FK of the position the candidate is running for.
                type: string
              username:
                description: The candidate's username.
                type: string
              display_name:
                description: The candidate's display name.
                type: string
            required:
              - position
              - username
              - display_name
    CandidatePUTBody:
      description: A JSON object containing candidate information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: The ID of the candidate.
                type: string
              election:
                description: The FK of the election the candidate is participating in.
                type: string
              position:
                description: The FK of the position the candidate is running for.
                type: string
              username:
                description: The candidate's username.
                type: string
              display_name:
                description: The candidate's display name.
                type: string
            required:
              - id
              - election
              - position
              - username
              - display_name
    PositionPOSTBody:
      description: A JSON object containing position information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              position:
                description: The name of the position.
                type: string
              election_type:
                description: The type of election, either senate or aswwu.
                type: string
              active:
                description: The availability of the position.
                type: boolean
              order:
                description: The order of the position.
                type: integer
            required:
              - position
              - election_type
              - active
              - order
    PositionPUTBody:
      description: A JSON object containing position information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: The ID of the position.
                type: string
              position:
                description: The name of the position.
                type: string
              election_type:
                description: The type of election, either senate or aswwu.
                type: string
              active:
                description: The availability of the position.
                type: boolean
              order:
                description: The order of the position.
                type: integer
            required:
              - id
              - position
              - election_type
              - active
              - order
    VotePOSTBody:
      description: A JSON object containing vote information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              election:
                description: The FK of the election the vote is for.
                type: string
              position:
                description: The position of the person being voted for.
                type: string
              vote:
                description: The username of the candidate being voted for. This must be a valid username.
                type: string
            required:
              - election
              - position
              - vote
    VotePUTBody:
      description: A JSON object containing vote information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: The ID of the vote.
                type: string
              election:
                description: The FK of the election the vote is for.
                type: string
              position:
                description: The position of the person being voted for.
                type: string
              vote:
                description: The username of the candidate being voted for. This must be a valid username.
                type: string
              username:
                description: The user's username.
                type: string
            required:
              - id
              - election
              - position
              - vote
              - username
    BallotPOSTBody:
      description: A JSON object containing manual vote information.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              election:
                description: The FK of the election the vote is for.
                type: string
              position:
                description: The position of the person being voted for.
                type: string
              student_id:
                description: The student ID of the voter.
                type: string
              vote:
                description: The username of the candidate being voted for. This does not have to be an actual username
                type: string
            required:
              - election
              - position
              - vote
  responses:
    204NoContent:
      description: The request completed successfully and has no response body.
    400BadRequest:
      description: The request could not be understood by the server.
    401NotAuthenticated:
      description: This action requires authentication.
    403Forbidden:
      description: This action requires authorization or is not allowed.
    404NotFound:
      description: The resource could not be found.
